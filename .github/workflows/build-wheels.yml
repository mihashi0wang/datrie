name: Build wheels

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
#  schedule:
#    - cron: '0 0 * * sun,wed'

jobs:
  build_wheels:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        env:
          CIBW_ARCHS_LINUX: x86_64
          #CIBW_ARCHS_MACOS: ""
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
          CIBW_SKIP: pp* *i686 *-musllinux_* *-win32
          #CIBW_TEST_COMMAND: pytest -rfxEXs --durations=20 --disable-warnings --showlocals --pyargs datrie
          #CIBW_TEST_REQUIRES: pytest testfixtures mock
          #CIBW_TEST_SKIP: "win*"
          CIBW_BUILD_VERBOSITY: 3

      - name: Upload wheels as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  test:
    name: Test ${{ matrix.os }} Py${{ matrix.python }}
    needs: build_wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - {python: '3.10', os: ubuntu-22.04}
          - {python: '3.11', os: ubuntu-22.04}
          - {python: '3.12', os: ubuntu-22.04}

          - {python: '3.10', os: windows-2022}
          - {python: '3.11', os: windows-2022}
          - {python: '3.12', os: windows-2022}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Downloads build artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: wheels-${{ matrix.os }}
          path: artifacts/

      - name: Check and Unzip Wheels in Linux
        if:  runner.os == 'Linux'
        run: |
          pwd
          ls artifacts/ -la
          if [ -f "artifacts/wheels-${{ matrix.os }}" ]; then
              echo "文件存在，正在解压..."
              unzip "artifacts/wheels-${{ matrix.os }}"
          else
              echo "文件不存在，跳过解压步骤。"
          fi
      
      - name: Check and Unzip Wheels in Windows
        if: runner.os == 'Windows'
        run: |
          # 获取当前目录
          Get-Location
          # 列出 artifacts 目录下的文件
          Get-ChildItem -Path "artifacts\" -Force
          # 检查文件是否存在
          if (Test-Path -Path "artifacts\wheels-${{ matrix.os }}") {
              Write-Host "文件存在，正在解压..."
              Expand-Archive -Path "artifacts\wheels-${{ matrix.os }}" -DestinationPath "artifacts\" -Force
          } else {
              Write-Host "文件不存在，跳过解压步骤。"
          }
        shell: pwsh

      - name: Install wheel in Linux
        if:  runner.os == 'Linux'
        run: |
          export PYTHON_VERSION_NO_DOT=$(echo ${{ matrix.python }} | sed 's/\.//')
          echo $PYTHON_VERSION_NO_DOT
          pwd
          ls artifacts/ -la
          python -m pip install ./artifacts/datrie-0.8.2-cp${PYTHON_VERSION_NO_DOT}-cp${PYTHON_VERSION_NO_DOT}-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

      - name: Install wheel in Windows
        if:  runner.os == 'Windows'
        run: |
         # 获取 Python 版本并去掉小数点
          $PYTHON_VERSION_NO_DOT = "${{ matrix.python }}".Replace('.', '')
          Write-Host "PYTHON_VERSION_NO_DOT: $PYTHON_VERSION_NO_DOT"
          
          # 获取当前目录
          $current_dir = Get-Location
          Write-Host "Current directory: $current_dir"
          
          # 列出 artifacts 目录内容
          Get-ChildItem -Path "artifacts" -Force | Format-List
          pip install ./artifacts/datrie-0.8.2-cp${PYTHON_VERSION_NO_DOT}-cp${PYTHON_VERSION_NO_DOT}-win_amd64.whl
        shell: pwsh

  
      # If the wheel was incorrectly built, then this will fail.
      - name: Test wheel
        run: python -c 'import datrie'